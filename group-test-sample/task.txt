Example 1.
Complete the following tasks with the data below! Write the result to the console! You do not have to create functions for the solution.

const numbers = [5, 2, 15, -3, 6, -8, -2];

const matrix = [
  [1, 0, 3],
  [0, 2, 0],
  [4, 5, 6],
  [0, 0, 0],
]

const searchResults = {
  "Search": [
    {
      "Title": "The Hobbit: An Unexpected Journey",
      "Year": "2012",
      "imdbID": "tt0903624",
      "Type": "movie"
    },
    {
      "Title": "The Hobbit: The Desolation of Smaug",
      "Year": "2013",
      "imdbID": "tt1170358",
      "Type": "movie"
    },
    {
      "Title": "The Hobbit: The Battle of the Five Armies",
      "Year": "2014",
      "imdbID": "tt2310332",
      "Type": "movie"
    },
    {
      "Title": "The Hobbit",
      "Year": "1977",
      "imdbID": "tt0077687",
      "Type": "movie"
    },
    {
      "Title": "Lego the Hobbit: The Video Game",
      "Year": "2014",
      "imdbID": "tt3584562",
      "Type": "game"
    },
    {
      "Title": "The Hobbit",
      "Year": "1966",
      "imdbID": "tt1686804",
      "Type": "movie"
    },
    {
      "Title": "The Hobbit",
      "Year": "2003",
      "imdbID": "tt0395578",
      "Type": "game"
    },
    {
      "Title": "A Day in the Life of a Hobbit",
      "Year": "2002",
      "imdbID": "tt0473467",
      "Type": "movie"
    },
    {
      "Title": "The Hobbit: An Unexpected Journey - The Company of Thorin",
      "Year": "2013",
      "imdbID": "tt3345514",
      "Type": "movie"
    },
    {
      "Title": "The Hobbit: The Swedolation of Smaug",
      "Year": "2014",
      "imdbID": "tt4171362",
      "Type": "movie"
    }
  ],
  "totalResults": "51",
  "Response": "True"
}
a. Assign (map) its square value to each item in numbers array. (0.5 points)
b. Find the smallest element of the numbers array! (You may use the Infinity value in JavaScript.) (0.5 points)
c. Give that row index of the matrix, which row is full of 0 value! If there is no such row, write -1 to the console! (1 point)
d. Give those IMDB identifiers (imdbID) from the searchResults lis, that belong to movies that are post-2010 (year field) and their type (Type) is movie. (1 point)

Given three range sliders on the web page, which can help you to give the hue, saturation and lightness value of a color. Technical help: in CSS you can give a color in this format: hsl(120, 60%, 70%).

<form>
  Hue: <input type="range" min="0" max="360" value="0"> <br>
  Saturation: <input type="range" min="0" max="100" value="50"> <br>
  Lightness: <input type="range" min="0" max="100" value="50"> <br>
  <button type="button">Set background color</button> <br>
  HSL string: <input type="text" readonly>
</form>
a. By clicking the button write the generated HSL CSS color code to the input box right after "HSL String" text. (1 point)
b. Clicking the button set the background color of the page according to the selected values. (1 point)
c. Change the background color immediately by moving the sliders. Technical help: use the input event of the sliders! (1 point)

A contact list is provided on the page in the following HTML structure. Each contact has three buttons that reveal the corresponding information from the contact data. Solve the following tasks using a single event handler.

<div id="contacts">
  <section>
    <p class="name">Name: A</p>
    <p class="email" hidden>Email of A</p>
    <p class="address" hidden>Address of A</p>
    <p class="phone" hidden>Phone of A</p>
    <p>
      <button data-toggle="email">Email</button>
      <button data-toggle="address">Address</button>
      <button data-toggle="phone">Phone</button>
    </p>
  </section>
  <section>
    <p class="name">Name: B</p>
    <p class="email" hidden>Email of B</p>
    <p class="address" hidden>Address of B</p>
    <p class="phone" hidden>Phone of B</p>
    <p>
      <button data-toggle="email">Email</button>
      <button data-toggle="address">Address</button>
      <button data-toggle="phone">Phone</button>
    </p>
  </section>
  <section>
    <p class="name">Name: C</p>
    <p class="email" hidden>Email of C</p>
    <p class="address" hidden>Address of C</p>
    <p class="phone" hidden>Phone of C</p>
    <p>
      <button data-toggle="email">Email</button>
      <button data-toggle="address">Address</button>
      <button data-toggle="phone">Phone</button>
    </p>
  </section>
</div>
a. Write the label and the the value of the data-toggle attribute of the clicked button to the console! (1 point)
b. Clicking the button write the contact name to the console. If there was no button click, do nothing! (1 point)
c. By clicking any of the button, make the email field of the contact visible. (1 point)
d. By clicking a button make that field visible that is specified in the data-toggle attribute of the button. (1 point)